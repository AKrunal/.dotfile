# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
********************************
*            basic             *
********************************

snippet main "__main__" b
${0}
def main():
	${1:pass}

if __name__ == "__main__":
	main()

endsnippet

snippet imp "import statements" b
import ${0:module}
endsnippet

snippet from "import statements" b
from ${1:package} import ${0:module}
endsnippet

snippet afrom "import statements" b
from ${1:package} import ${2:module} as ${0:alias}
endsnippet

snippet start "starter of documentation" b
"""
Author : `echo $USER`
Date : `!v strftime('%c')`
Description: ${0}
"""
endsnippet

*******************************
*           logical           *
*******************************

snippet if "if condition" b
if ${1:condision} :
	${2:pass}

${0}
endsnippet

snippet else if "if with else" b
if ${1:condition}:
	${2:pass}
else:
	${3:pass}

${0}
endsnippet

snippet for	"for loop" b
for ${1:item} in ${2:items}:
	${0:pass}
endsnippet

*******************************
*           classes           *
*******************************

snippet cl "Class with init and str " b
class ${1:cl}:
	""" ${2:doc string for} """
	
	def __init__(self,${3}):
		${4:pass}
	
	def __str__(self):
		return self.${0:class}
endsnippet

snippet cls "Class with only init" b
class ${1:class}:
	
	def __init__(self,${2:args}):
		${0:pass}
endsnippet
